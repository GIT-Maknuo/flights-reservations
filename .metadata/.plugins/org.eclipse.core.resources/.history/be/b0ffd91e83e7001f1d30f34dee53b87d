package com.reservations.flights.services;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.springframework.amqp.rabbit.core.RabbitTemplate;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.reservations.flights.config.RabbitMQConfig;
import com.reservations.flights.dto.ReservationResponseDto;
import com.reservations.flights.model.Reservation;
import com.reservations.flights.repositories.ReservationRepository;


@Service
public class ReservationServiceImpl  implements IReservationService {

    private final ReservationRepository reservationRepository;
    
    private final RabbitTemplate rabbitTemplate;
    
    ReservationServiceImpl(ReservationRepository reservationRepository, 
    		RabbitTemplate rabbitTemplate) {
        this.reservationRepository = reservationRepository;
        this.rabbitTemplate = rabbitTemplate;
    }

    @Override
    @Transactional(readOnly = true)
    public List<Reservation> findAll() {
        return reservationRepository.findAll();
    }
    
    @Override
    @Transactional(readOnly = true)
    public List<ReservationResponseDto> findByCancelledFalse(){
    	return reservationRepository.findByCancelledFalse()
				.stream()
				.map(reservation -> {
					String num = reservation.getId()!=null?reservation.getId().toString():"Generando...";
					return new ReservationResponseDto(num , reservation.getPassengerName(), 
							reservation.getFlight().getOrigin(), reservation.getFlight().getDestiny(), 
							reservation.getSeat().getNumber(),"Reserva activa");			
				}).collect(Collectors.toList());
	}


    @Override
    @Transactional(readOnly = true)
    public Optional<Reservation> findById(Long id) {
    	Optional<Reservation> reservationOp = reservationRepository.findById(id);
    	return reservationOp.isPresent() ? reservationOp : Optional.empty();
    }

    @Override
    public Optional<Reservation> save(Reservation reservation) { 
    	try {
            rabbitTemplate.convertAndSend(RabbitMQConfig.RESERVA_EXCHANGE, RabbitMQConfig.RESERVA_ROUTING_KEY, reservation);
            return Optional.of(reservation);    		
		} catch (Exception e) {
			e.printStackTrace();
			return Optional.empty();
		}
    }
    
	
	@Override
	@Transactional
	public Optional<Reservation> deleteById(Long id) {
		Optional<Reservation> reservationOp = reservationRepository.findById(id);
		return reservationOp
				.isPresent() ? 
					reservationOp
						.map(reservationToUpdate -> {
		                    reservationToUpdate.setCancelled(true);
		                    if (reservationToUpdate.getSeat() != null) {
	                            reservationToUpdate.getSeat().setAvailable(true);
	                        }
		                    return Optional.of(reservationRepository.save(reservationToUpdate));
		                }).orElseThrow()
					: Optional.empty(); 
	}		


    
}
